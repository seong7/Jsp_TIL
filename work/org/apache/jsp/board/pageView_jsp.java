/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.27
 * Generated at: 2019-11-26 06:10:30 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.UtilMgr;

public final class pageView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("board.UtilMgr");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	int totalRecord =UtilMgr.parseInt(request, "totalRecord");	  // 총게시물 개수  (mgr 메소드 사용해서 가져올 예정)
	out.print(totalRecord);
	int numPerPage=10;  // 페이지당 레코드 개수 (5, 10, 15, 30)  클라이언트가 동적으로 선택 가능하게 구현
	int pagePerBlock = 15; // 한번에 표시되는 페이지 개수
	int totalPage = 0;		// 총 페이지 개수
	int totalBlock = 0; 		// 총 블럭 개수
	int nowPage = 1;			// 최초 접속시 default page
	int nowBlock = 1;		// 최초 접속시 default block
	
	
		/** BoardMgr.getBoardList() 의 매개변수 중 sql 문 LIMIT 조건에 들어갈 값 지정 **/
		// LIMIT start, cnt     :    start 번째 행부터 cnt 개 레코드 출력 
	int start = 0;
		
	// nowPage 를 요청한 경우
	if(request.getParameter("nowPage")!=null){
	nowPage = UtilMgr.parseInt(request, "nowPage");
	}
	
	// 테이블의 시작 행 번호
	start = (nowPage*numPerPage) - numPerPage;
	
	// 전체 페이지 수 (전체레코드 수 / 페이지당 레코드 수) 올림
	totalPage = (int)Math.ceil((double)totalRecord/numPerPage);
	
	// 전체 블럭 수 (전체페이지 수 / 블럭당 페이지 수) 올림
	totalBlock = (int)Math.ceil((double)totalPage/pagePerBlock);
	
	// 현재 블럭 (현재 페이지 수 / 블럭당 페이지 수) 올림
	nowBlock = (int)Math.ceil((double)nowPage/pagePerBlock);

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<title>페이징 & 블럭 처리 테스트</title>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<link href=\"style.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t\tfunction block(block){\r\n");
      out.write("\t\t\tdocument.readFrm.nowPage.value=\r\n");
      out.write("\t\t\t\t");
      out.print(pagePerBlock);
      out.write("*(block-1)+1;\r\n");
      out.write("\t\t\t\tdocument.readFrm.submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction pageing(page){\r\n");
      out.write("\t\t\tdocument.readFrm.nowPage.value=page;\r\n");
      out.write("\t\t\tdocument.readFrm.submit();\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("\t<body bgcolor=\"#FFFFCC\">\r\n");
      out.write("\t\t<div align=\"center\"><br/>\r\n");
      out.write("\t\t<h2>페이징 & 블럭 처리 테스트</h2>\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td  width=\"700\" align=\"center\">\r\n");
      out.write("\t\t\t\tTotal : ");
      out.print(totalRecord);
      out.write("Articles(\r\n");
      out.write("\t\t\t\t<font color=\"red\">");
      out.print(nowPage+"/"+totalPage);
      out.write("Pages</font>\r\n");
      out.write("\t\t\t\t)\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>게시물 번호 : &nbsp;</td>\r\n");
      out.write("\t\t\t\t");

					int listSize=totalRecord-start;
					for(int i=0; i<numPerPage; i++){
						if(i==listSize) break;
				
      out.write("\r\n");
      out.write("\t\t\t\t<td align=\"center\">\r\n");
      out.write("\t\t\t\t\t");
      out.print(totalRecord-start-i );
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t");
	
					}//---for
				
      out.write("\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!----------------- 페이징 및 블럭 시작 -->\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t");

						if(totalPage>0){
					
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t<!-- 이전 블럭 -->\r\n");
      out.write("\t\t\t\t\t\t\t");
if(nowBlock>1){ 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<a href=\"javascript:block('");
      out.print(nowBlock-1);
      out.write("')\">prev...</a>\r\n");
      out.write("\t\t\t\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t<!-- 페이징 -->\r\n");
      out.write("\t\t\t\t\t\t\t");

								int pageStart=(nowBlock-1)*pagePerBlock+1;
								int pageEnd = (pageStart+pagePerBlock)<totalPage?
													pageStart+pagePerBlock:totalPage+1;
								for(;pageStart<pageEnd;pageStart++){
									
							
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<a href=\"javascript:pageing('");
      out.print(pageStart);
      out.write("')\">\r\n");
      out.write("\t\t\t\t\t\t\t");

									if(pageStart ==nowPage){
      out.write("<font color=\"red\">\t");
}
      out.write(" \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t[");
      out.print(pageStart );
      out.write("]\r\n");
      out.write("\t\t\t\t\t\t\t\t\t");
if(pageStart==nowPage){ 
      out.write("</font>");
} 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t</a>\r\n");
      out.write("\t\t\t\t\t\t\t");
} 
      out.write("\t\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t<!-- 다음 블럭 -->\r\n");
      out.write("\t\t\t\t\t\t\t");
if(totalBlock>nowBlock){ 
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t<a href=\"javascript:block('");
      out.print(nowBlock+1);
      out.write("')\">...next</a>\r\n");
      out.write("\t\t\t\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t");
}	
      out.write("\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t<form name=\"readFrm\">\r\n");
      out.write("\t\t\t<input type=\"hidden\"\tname = \"totalRecord\" value=\"");
      out.print(totalRecord );
      out.write("\">\r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"nowPage\" value=\"");
      out.print(nowPage );
      out.write("\">\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<!------------------ 페이징 및 블럭 끝 -->\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t<hr width=\"45%\"/>\r\n");
      out.write("\t\t<b>\r\n");
      out.write("\t\t\ttotalRecord : ");
      out.print(totalRecord);
      out.write("&nbsp;\r\n");
      out.write("\t\t\tnumPerPage : ");
      out.print(numPerPage);
      out.write("&nbsp;\r\n");
      out.write("\t\t\tpagePerBlock : ");
      out.print(pagePerBlock);
      out.write("&nbsp;\r\n");
      out.write("\t\t\ttotalPage : ");
      out.print(totalPage);
      out.write("&nbsp;<br/>\r\n");
      out.write("\t\t\ttotalBlock : ");
      out.print(totalBlock);
      out.write("&nbsp;\r\n");
      out.write("\t\t\tnowPage : ");
      out.print(nowPage);
      out.write("&nbsp;\r\n");
      out.write("\t\t\tnowBlock : ");
      out.print(nowBlock);
      out.write("&nbsp;\r\n");
      out.write("\t\t\tstart : ");
      out.print(start);
      out.write("&nbsp;\r\n");
      out.write("\t\t</b>\r\n");
      out.write("\t\t<p/>\r\n");
      out.write("\t\t<input type=\"button\" value=\"TotalRecord 입력폼\"\r\n");
      out.write("\t\t\t onClick=\"javascript:location.href='pageView.html'\">\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
