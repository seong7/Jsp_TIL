/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.27
<<<<<<< HEAD
 * Generated at: 2019-11-07 08:28:10 UTC
=======
 * Generated at: 2019-11-07 08:29:46 UTC
>>>>>>> newA
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ch04;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class multiplication_005ftable_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 
				int i;
				int j;
			
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<title>my first 구구단.jsp</title>\r\n");
      out.write("<style>\r\n");
      out.write("\tbody { background :#E85A58 }\r\n");
      out.write("\th1 { color : #FFBF66;\r\n");
      out.write("\t\t   font-weight : bolder;\r\n");
      out.write("\t\t   }\r\n");
      out.write("\t\r\n");
      out.write("\ttd:hover { background : black; }\r\n");
      out.write("\tth:hover { background : black; }\r\n");
      out.write("\t\r\n");
      out.write("\tthead{ \r\n");
      out.write("\t\t\t   background : #43373a;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\tth { height : 60px;\r\n");
      out.write("\t\t  test-align : center; \r\n");
      out.write("\t\t  font-weight : bolder;\r\n");
      out.write("\t\t  font-size : x-large;\r\n");
      out.write("\t\t  /*border-radius : 10px;*/\r\n");
      out.write("\t\t  }\r\n");
      out.write("\t.th-top_left-radius {\r\n");
      out.write("\t\t\t\t\t\t\t\t border-top-left-radius : 10px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.th-top_right-radius {\r\n");
      out.write("\t\t\t\t\t\t\t\t border-top-right-radius : 10px;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.td-bot_left-radius-dark {\r\n");
      out.write("\t\t\t\t\t\t\t     border-bottom-left-radius : 10px;\r\n");
      out.write("\t\t\t\t\t\t\t     background : #ea6462;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.td-bot_right-radius-dark {\r\n");
      out.write("\t\t\t\t\t\t\t\t border-bottom-right-radius : 10px;\r\n");
      out.write("\t\t\t\t\t\t\t\t background : #ea6462;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.td-light {\r\n");
      out.write("\t\t\t\t  background : #fc7a78;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.td-dark {\r\n");
      out.write("\t\t\t\t  background : #ea6462;\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\ttr, td { align : center;\r\n");
      out.write("\t\t\t  text-align : center; \r\n");
      out.write("\t\t\t  font-weight : normal;\r\n");
      out.write("\t\t\t  /*border-radius : 10px;*/\r\n");
      out.write("\t\t\t  }\r\n");
      out.write("\t\r\n");
      out.write("\t.bodywrap { border-radius : 10px;\r\n");
      out.write("\t\t\t\t\t  /*border : 2px solid black;*/\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\t.table { border : 1px;\r\n");
      out.write("\t\t\t\tborder-collapse : collapse;\r\n");
      out.write("\t\t\t\ttable-layout : auto;\r\n");
      out.write("\t\t\t\twidth : 900px;\r\n");
      out.write("\t\t\t\theight : 600px;\r\n");
      out.write("\t\t\t\ttext-align : center;\r\n");
      out.write("\t\t\t\talign : center;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<br/>\r\n");
      out.write("\t\t<h1 align=\"center\">\r\n");
      out.write("\t\t\t구 구 단\r\n");
      out.write("\t\t</h1>\r\n");
      out.write("\t\t<br />\r\n");
      out.write("\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"bodywrap\">\r\n");
      out.write("\t\t<table class=\"table\" align=\"center\">\r\n");
      out.write("\t\t\t<thead>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t");

							for(i=1; i<10; i++){
								out.println("<th");
								if(i==1){
									out.println(" class = \"th-top_left-radius\"");
								}else if(i==9){
									out.println(" class = \"th-top_right-radius\"");
								}
								out.println("><font color = \"#FFBF66\">" +  i + " 단</font></th>");
							} 
						
      out.write("\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t</thead>\r\n");
      out.write("\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");

							for(i=1; i<10; i++){
								out.println("<tr>");
								
								for(j=1; j<10; j++){
									out.println("<td");
									if(i%2 ==1){
										if(j%2 ==1){
											if(i == 9 && j == 1){
												out.println(" class = \"td-bot_left-radius-dark\"");
												//continue;
											} else if(i == 9 && j == 9){
												out.println(" class = \"td-bot_right-radius-dark\"");
												//continue;
											}	else
											out.println(" class = \"td-dark\"");
										}
										else if(j%2==0)
											out.println(" class = \"td-light\"");
									}else if(i%2 ==0){
										if(j%2 ==0)
											out.println(" class = \"td-dark\"");
										else if(j%2==1)
											out.println(" class = \"td-light\"");
									}
															
									out.println("><font color = \"#FFFF35\">" + j + " x " + i + " = " + i*j + "</font></td>");
								}
								out.println("</tr>");
							}
						
      out.write("\r\n");
      out.write("\t\t\t</tbody>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
